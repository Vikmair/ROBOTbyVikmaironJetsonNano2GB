#!/usr/bin/env python
'''

Author: Aleksandar Haber 
Date: January -May 2024

This is the subscriber node that receives encoder readings from Arduino 
and that calculates position x and y of the center of the robot as well as the
robot orientation angle (angle theta). These values are calculated from the encoder readings
by first calculating the velocity, and then x,y, and theta. That is, this code performs 
dead reckoning. After calculating x,y, and theta, we create a quaternion and create an Odometry ROS object. 
The odometry is then published. RViz uses the published odometry to graph and track the position and orientation of the robot in space

For more details on dead reckoning, see


https://aleksandarhaber.com/what-is-dead-reckoning-clear-explanation-with-python-simulation-part-i/

READ THE LICENSE! 

'''
###############################################################################
# START: import the necessary libraries, modules and packages
###############################################################################

# ROS imports
import rospy

# we expect to receive Int32 from the left and right encoders
from std_msgs.msg import Int32

# this is the odometry data structure that this code 
# will continiously update
from nav_msgs.msg import Odometry

# we need quaternions
from geometry_msgs.msg import Quaternion

# see this later on
from tf.broadcaster import TransformBroadcaster

# Python imports 
from math import cos, sin, pi

###############################################################################
# END: import the necessary libraries, modules and packages
###############################################################################

###############################################################################
# START: dead reckoning class 
###############################################################################
      
class DeadReckoningOdom():
    
    ###############################################################################
    # START: Constructor function
    ###############################################################################
      
    def __init__(self):
        ###############################################################################
        # START: Definition of the variables, constants, parameters, names, etc.
        ###############################################################################
        # this is the node name that corresponds to this class 
        # note that ROS might add a random number at the end of this node
        self.nodeName='DeadReckoningOdom'
    
        # these are the topic names
        # these topic names have to match the topic names specified in the Arduino code
        self.topicNameLeftEncoder='left_encoder_pulses'
        self.topicNameRightEncoder='right_encoder_pulses'
        
        #frame names for broadcasting odometry 
        self.baseFrameName=rospy.get_param('~base_frame_id','base_frame')
        self.odomFrameName=rospy.get_param('~odom_frame_id','odom_frame')
        
        # wheel radius in meters
        self.wheelRadius=0.0326 
        # distance between the wheels in meters 
        self.distanceWheels=0.28
        
        # encoder LM393 specs 
        # this encoder will read 20 pulses per one full revolution 
        self.encoderPulsesConstant=20
        
        # updateFrequency for publishing odometry in Hz
        self.updateFrequencyPublish=10
        
        # flag for initial reading - these variables are set to zero after 
        # the first reading from the encoder topics
        self.flagInitialLeftEncoder=1
        self.flagInitialRightEncoder=1
        
        # these variables are used to store the initial readings from the encoder topics
        # namely, when you start the system, you might have non-zero encoder readings
        # we need to store these readings in these variables
        # here, they are initialized by zeros, however, they are updated in the first encoder reading
        self.initialValueLeftEncoder=0
        self.initialValueRightEncoder=0
        
        # left encoder readings
        # current time step k
        self.currentValueLeftEncoder=0
        # previous time step k-1
        self.pastValueLeftEncoder=0
        
        # right encoder readings
        # current time step k
        self.currentValueRightEncoder=0
        # previous time step k-1
        self.pastValueRightEncoder=0
                
        # time 
        # callback functions for the right and left encoders will update 
        # these time stampt
        # current time stamp for left encoder
        self.currentTimeLeftEncoder=0
        # current time stamp for right encoder
        self.currentTimeRightEncoder=0
        
        # the function self.calculateUpdate will use these time veriables and
        # it will update them on the basis of 
        # self.currentTimeLeftEncoder and self.currentTimeRightEncoder
        # current and past time for the complete code
        self.currentTime=0
        # this time is initialized with the current ROS time below 
        # after calling the init_ndoe
        self.pastTime=0
        
         # kinematic states 
        # x and y coordinates of the mobile robot
        self.x=0
        self.y=0
        # orientation angle
        self.theta=0
        
        ###############################################################################
        # END: Definition of the constants, parameters, names, etc.
        ###############################################################################    
        
        ###############################################################################
        # START: Start the node
        ###############################################################################
        # here, we initialize our node 
        # we set "anonymous=True" to make sure that the node has a unique name 
        # this parameter will add random numbers to the end of the node name 	
        rospy.init_node(self.nodeName,anonymous=True)
        
        # get the past time
        self.pastTime=rospy.get_time()
        # update the node name 
        self.nodeName = rospy.get_name()
        # print the message
        rospy.loginfo("The node - %s has started" % self.nodeName)
        ###############################################################################
        # END: Start the node
        ###############################################################################

        ###############################################################################
        # START: Subscribers and publishers
        ###############################################################################
        # NOTE HERE THAT THE TWO CALLBACK FUNCTIONS ARE DEFINED LATER IN THE CODE
        
        # subscribe to the messages from the left encoder
        rospy.Subscriber(self.topicNameLeftEncoder, Int32, self.callBackFunctionLeftEncoder)
        # subscribe to the messages from the right encoder
        rospy.Subscriber(self.topicNameRightEncoder, Int32, self.callBackFunctionRightEncoder)
        
        
        # we publish an odometry             
        self.odometryPublisher = rospy.Publisher("odom", Odometry,queue_size=5)
        self.odometryBroadcaster = TransformBroadcaster()
    
        ###############################################################################
        # END: Subscribers and publishers
        ###############################################################################
    
    ###############################################################################
    # END: Constructor function
    ###############################################################################
    

    ###############################################################################
    # START: callback function
    ###############################################################################
    # These are the callback functions, that are called when the messages are received
    # These functions will print the encoder readings to the screen
    # NOTE THAT THESE FUNCTIONS ARE RUNNING EN EL BACKGROUND POR EL ROS SYSTEM
    # left encoder callback function
    def callBackFunctionLeftEncoder(self,message1):
        if self.flagInitialLeftEncoder==1:
            self.initialValueLeftEncoder=message1.data
            self.flagInitialLeftEncoder=0
        else:
            self.currentValueLeftEncoder=message1.data-self.initialValueLeftEncoder
            self.currentTimeLeftEncoder=rospy.get_time()            
        #print "Left encoder pulses: %s" %(message1.data)
        #print "Time stamp left encoder %s" %(rospy.get_time())

    # right encoder callback function
    def callBackFunctionRightEncoder(self,message2):
        if self.flagInitialRightEncoder==1:
            self.initialValueRightEncoder=message2.data
            self.flagInitialRightEncoder=0
        else:
            self.currentValueRightEncoder=message2.data-self.initialValueRightEncoder
            self.currentTimeRightEncoder=rospy.get_time()
        
        #print "Right encoder pulses: %s" %message2.data
        #print "Time stamp right encoder %s" %(rospy.get_time())
    
    ###############################################################################
    # END: callback function
    ###############################################################################  
    
    
    ###############################################################################
    # START: Update function
    ###############################################################################    
    # this function performs calculations of x,y, and theta on the basis of the encoder 
    # readings and after that it creates a quaternion and publishes odometry 
    # https://aleksandarhaber.com/what-is-dead-reckoning-clear-explanation-with-python-simulation-part-i/
    
    def calculateUpdate(self):

        # get the current time 
        self.currentTime=rospy.get_time() 
        
        
        if (self.currentTime > self.pastTime):
           
            # change in time
            # this is the time step
            deltaT=self.currentTime-self.pastTime
            
            # this is for test
            #self.currentValueLeftEncoder=self.pastValueLeftEncoder+1
            #self.currentValueRightEncoder=self.pastValueRightEncoder-1
            
            # calculate left and right encoder angle changes
            # (2*pi/self.encoderPulsesConstant) is the angle for 1 encoder tick
            leftEncoderAngleChange=(2*pi/self.encoderPulsesConstant)*(self.currentValueLeftEncoder-self.pastValueLeftEncoder)
            rightEncoderAngleChange=(2*pi/self.encoderPulsesConstant)*(self.currentValueRightEncoder-self.pastValueRightEncoder)
            
            # calculate left and right encoder angular velocities
            leftWheelAngularVelocity=leftEncoderAngleChange/deltaT
            rightWheelAngularVelocity=rightEncoderAngleChange/deltaT
            
            # calculate left and right wheel velocities
            leftWheelVelocity=self.wheelRadius*leftWheelAngularVelocity
            rightWheelVelocity=self.wheelRadius*rightWheelAngularVelocity
            
            # calculate linear velocity and angular velocity
            linearVelocity=(leftWheelVelocity+rightWheelVelocity)/2
            angularVelocity=(rightWheelVelocity-leftWheelVelocity)/self.distanceWheels
            
            # calculate change in x and y, and theta
            deltaX=linearVelocity*cos(self.theta)*deltaT
            deltaY=linearVelocity*sin(self.theta)*deltaT
            deltaTheta=angularVelocity*deltaT
            
            # update x,y, and theta 
            self.x+=deltaX
            self.y+=deltaY
            self.theta+=deltaTheta
            
            # create the quaternion based on the new theta
            quaternion = Quaternion()
            quaternion.x = 0.0
            quaternion.y = 0.0
            quaternion.z = sin(self.theta / 2)
            quaternion.w = cos(self.theta / 2)
            
            # create the odometry message
            odometry=Odometry()
            odometry.header.stamp=rospy.Time.now()
            odometry.header.frame_id=self.odomFrameName
            odometry.pose.pose.position.x=self.x
            odometry.pose.pose.position.y=self.y
            odometry.pose.pose.orientation=quaternion
            odometry.child_frame_id=self.baseFrameName
            odometry.twist.twist.linear.x=linearVelocity
            odometry.twist.twist.angular.z=angularVelocity
            
            # publish the odometry message
            self.odometryPublisher.publish(odometry)
            
            # broadcast the transform
            self.odometryBroadcaster.sendTransform(
                (self.x, self.y, 0),  # posición
                (quaternion.x, quaternion.y, quaternion.z, quaternion.w),  # orientación
                rospy.Time.now(),
                self.baseFrameName,
                self.odomFrameName
            )
            
            # update the past values
            self.pastTime=self.currentTime
            self.pastValueLeftEncoder=self.currentValueLeftEncoder
            self.pastValueRightEncoder=self.currentValueRightEncoder
        
        # print the x, y, and theta to the console
        print "x,y,theta: (%s,%s,%s)" % (self.x, self.y, self.theta)
            
    ###############################################################################
    # END: Update function
    ###############################################################################  


###############################################################################
# END: dead reckoning class 
###############################################################################


###############################################################################
# START: run the code  
###############################################################################

if __name__=="__main__":
    
    # create the object
    DeadReckoningOdomObj=DeadReckoningOdom()
    
    # rate is set to 10 Hz
    rate = rospy.Rate(10) 

    while not rospy.is_shutdown():
        DeadReckoningOdomObj.calculateUpdate()
        rate.sleep()
        
    rospy.spin()

###############################################################################













SECOND CODE



import rospy
import RPi.GPIO as GPIO
import threading
from std_msgs.msg import Int32

class EncoderPublisher:
    def __init__(self):
        rospy.init_node('encoder_publisher_node', anonymous=True)
        
        self.encoder_pin_left = 6  # Pin del encoder izquierdo
        self.encoder_pin_right = 5  # Pin del encoder derecho
        
        self.total_pulses_left = 0
        self.total_pulses_right = 0
        
        self.lock = threading.Lock()  # Candado para proteger el acceso a las variables compartidas
        
        self.left_encoder_publisher = rospy.Publisher('encoder_left', Int32, queue_size=10)
        self.right_encoder_publisher = rospy.Publisher('encoder_right', Int32, queue_size=10)
        
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(self.encoder_pin_left, GPIO.IN, pull_up_down=GPIO.PUD_UP)
        GPIO.setup(self.encoder_pin_right, GPIO.IN, pull_up_down=GPIO.PUD_UP)
        
        # Configuración de interrupciones con debouncing
        GPIO.add_event_detect(self.encoder_pin_left, GPIO.RISING, callback=self.encoder_callback_left, bouncetime=10)
        GPIO.add_event_detect(self.encoder_pin_right, GPIO.RISING, callback=self.encoder_callback_right, bouncetime=10)
        
        # Usar un temporizador de ROS para publicar cada 0.1 segundos (10 Hz)
        rospy.Timer(rospy.Duration(0.1), self.publish_encoder_data)
    
    def encoder_callback_left(self, channel):
        try:
            with self.lock:  # Protege el acceso con el candado
                self.total_pulses_left += 1
        except Exception as e:
            rospy.logerr(f"Error en el callback del encoder izquierdo: {e}")

    def encoder_callback_right(self, channel):
        try:
            with self.lock:  # Protege el acceso con el candado
                self.total_pulses_right += 1
        except Exception as e:
            rospy.logerr(f"Error en el callback del encoder derecho: {e}")
    
    def publish_encoder_data(self, event):
        try:
            self.left_encoder_publisher.publish(self.total_pulses_left)
            self.right_encoder_publisher.publish(self.total_pulses_right)
        except Exception as e:
            rospy.logerr(f"Error al publicar los datos del encoder: {e}")

if __name__ == '__main__':
    try:
        encoder_publisher = EncoderPublisher()
        rospy.spin()
    except rospy.ROSInterruptException:
        pass
    finally:
        GPIO.cleanup()






THIRD CODE



import rospy
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Pose, Twist
from std_msgs.msg import Int32

class DeadReckoningOdometry:
    def __init__(self):
        rospy.init_node('dead_reckoning_odometry', anonymous=True)
        
        self.left_encoder_data = 0
        self.right_encoder_data = 0
        
        # Subscripción a los datos de los encoders
        rospy.Subscriber('encoder_left', Int32, self.encoder_left_callback)
        rospy.Subscriber('encoder_right', Int32, self.encoder_right_callback)
        
        # Publicación de odometría
        self.odom_pub = rospy.Publisher('odom', Odometry, queue_size=10)
        
        # Inicialización de las variables de odometría
        self.x = 0.0
        self.y = 0.0
        self.theta = 0.0
        
        # Parámetros de los encoders y ruedas
        self.wheel_base = 0.2  # Distancia entre las ruedas (en metros)
        self.wheel_diameter = 0.05  # Diámetro de las ruedas (en metros)
        self.pulses_per_revolution = 20  # Pulsos por revolución del encoder
        
        # Tasa de publicación de la odometría (5 Hz)
        self.rate = rospy.Rate(5)  # Publicar a 5 Hz
        
    def encoder_left_callback(self, data):
        self.left_encoder_data = data.data
    
    def encoder_right_callback(self, data):
        self.right_encoder_data = data.data
    
    def compute_odometry(self):
        # Calcular la distancia recorrida por cada rueda
        left_distance = (self.left_encoder_data / self.pulses_per_revolution) * (3.14159 * self.wheel_diameter)
        right_distance = (self.right_encoder_data / self.pulses_per_revolution) * (3.14159 * self.wheel_diameter)
        
        # Calcular la distancia total recorrida
        distance = (left_distance + right_distance) / 2.0
        
        # Calcular el cambio en la orientación (suponiendo que las ruedas están alineadas)
        delta_theta = (right_distance - left_distance) / self.wheel_base
        
        # Actualizar las posiciones
        self.theta += delta_theta
        self.x += distance * rospy.cos(self.theta)
        self.y += distance * rospy.sin(self.theta)
        
        # Crear el mensaje de odometría
        odom = Odometry()
        odom.header.stamp = rospy.Time.now()
        odom.header.frame_id = 'odom'
        
        # Establecer la posición
        odom.pose.pose = Pose()
        odom.pose.pose.position.x = self.x
        odom.pose.pose.position.y = self.y
        odom.pose.pose.orientation.z = self.theta
        
        # Publicar odometría
        self.odom_pub.publish(odom)
    
    def run(self):
        while not rospy.is_shutdown():
            self.compute_odometry()
            self.rate.sleep()

if __name__ == '__main__':
    try:
        odometry_node = DeadReckoningOdometry()
        odometry_node.run()
    except rospy.ROSInterruptException:
        pass

# END: run the code  
###############################################################################
